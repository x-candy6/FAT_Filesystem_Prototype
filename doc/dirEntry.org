/*
 * =====================================================================================
 *
 *       Filename:  dirEntry.c
 *
 *    Description:
 *
 *        Version:  1.0
 *        Created:  11/22/2022 17:42:41
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  AndyC (),
 *   Organization:
 *
 * =====================================================================================
 */
#include <stdlib.h>

/**
 * The directory entry structure is located at the beginning of each cluster
 *| BYTES | DESC                                                        |
 *|     0 | 1st char of file name 0x00=free 0xe5=deleted                |
 *|  1-10 | chars 2-11 of file name, the "." is between 7 and           |
 *|    11 | file attrs                                                  |
 *|    12 | reserved                                                    |
 *|    13 | file creation time                                          |
 *| 14-15 | Creation Time                                               |
 *| 16-17 | Creation Date                                               |
 *| 18-19 | Access Date                                                 |
 *| 20-21 | High-order 2 bytes of address of first cluster(0 for FAT16) |
 *| 22-23 | Modified Time                                               |
 *| 24-25 | Modified Date                                               |
 *| 26-27 | Low-order 2 bytes of first cluster                          |
 *| 28-31 | File size(0 for directories)                                |
 * 
 *| File Attributes  | Desc           |
 *| 0000 0001 (0x01) | RO             |
 *| 0000 0010 (0x02) | HIDDEN         |
 *| 0000 0100 (0x04) | System File    |
 *| 0000 1000 (0x08) | Volume Label   |
 *| 0000 1111 (0x0f) | Long file name |
 *| 0001 0000 (0x10) | Directory      |
 *| 0010 0000 (0x20) | Archive        |
 *
 *
 *
 * **/
typedef struct dirEntry {

} dirEntry;


fat
 vcb is block 0
 fsm is block 1
root is block 2
how are directories and files nested?

fsm
an array of 19531 elements
each element represents a cluster
a cluster is a struct

struct Cluster{
  int busy;
  //if next is -1, it is the last
  //else it points to the cluster with the next frag
  int next;

}

so the rootDirEntry is an array of direntries(which can also be files)


fsm{


}


OKkay so we're abit confused on how file handling works with directories and multiple files
so lets say we have our rootDir at block 2
it has a list of dirEntries(files or folders)
so after the first 32bytes it will be the first file/dir in the root dir
We need to set a maximum amount of entries for the root.(i think)
if we are searching for a file/dir
    it will parse to the block of that folder,
    for every 32bytes, check the Lowest order(?? - still don't know how this works)
    until a match, and then we have the starting cluster of the file we want

if an entry is marked as a dir:4, parse every 32bytes until an unallocated space pops up

11/24/22
So far I wrote the pseudocode for parsepath

basically,
our fs has a vcb:0, FAT:1, ROOT:2,
We need to set a custom cluster size for root otherwise the maximum file/folders it could have is 16
So Root starts at 2 but ends at like an arbitrary point, lets say 4.
Within Root, the first entry is root. duh
skipping 32b later(because our dirEntry should be 32b), is the first file in our root
then iterating 32b until the first bit is free.. each iteration is a file/dir
if its a file, great, we can start reading that file

if it's a dir(the 11th bit is the file attribute, 4 is dir), goto that cluster
and iterate 32b over again

So now, we have to finish our FSM.
Write the root directory.
Check the hexdump.







