* Free Space Management
** File Allocation Table
Traditionally the FAT is a linked list, indexed by the blocks.
Each file is represented as a linked list of blocks.

given a starting block of a file

FAT uses clusters but our cluster size is the exact same size as the block
size.

So our FAT will be indexed from 0 to 19936

So here's a linked list
|[DATA] [NEXT]|
|NODE #0      |
      ⬇️


Alternatively(Experiment time), we can use an array of 19936 fatEntry
structs.

Each struct has a 0/1 value for tracking busy/free
and a Integer Next value that tracks the start of the next block of the file
If the block is the last block of the file, we mark the 'next' as -1.
So to read through a file we would iterate through the next values until we
reach -1.

So here's an array
|[DATA] [NEXT]|>>|[0][NULL]|>>|[1] [-1]| >> |[1] [3]| >> |[1] [5]|>|[1][-1]|>> |[1][4]|
    index            0              1           2            3         4           5         

And the start of each 'chain' will be the dirEntry

* Directory Entry
The directory entry and file entry are the same but there are differences for
directories, files, and the root directory.


* Coding Session Notes
first LBAread
Check signature
if match proceed
if not match init VCB